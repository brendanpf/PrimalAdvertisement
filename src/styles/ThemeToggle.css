button {
    display: flex;
    border: 0;
    border-radius: 999rem;
    padding: 0;
    background-color: var(--gray-999);
    box-shadow: inset 0 0 0 1px var(--accent-overlay);
    cursor: pointer;
}

.icon {
    z-index: 1;
    position: relative;
    display: flex;
    padding: 0.5rem;
    width: 2rem;
    height: 2rem;
    font-size: 1rem;
    color: var(--accent-overlay);
}

.icon.light::before {
    content: '';
    z-index: -1;
    position: absolute;
    inset: 0;
    background-color: var(--accent-regular);
    border-radius: 999rem;
}

/* Make sure the transform moves the light icon based on theme-dark class */
:global(.theme-dark) .icon.light::before {
    transform: translateX(100%);
}

:global(.theme-dark) .icon.dark {
    color: var(--accent-text-over);
}

/* Ensure the light icon gets the correct color when not in dark mode */
:global(html:not(.theme-dark)) .icon.light {
    color: var(--accent-text-over);
}

/* Ensure the slider and color toggle for the button works based on aria-pressed */
button[aria-pressed='false'] .icon.light {
    color: var(--accent-overlay);
    transform: translateX(0);
}

button[aria-pressed='true'] .icon.light {
    color: var(--accent-text-over);
    transform: translateX(100%);
}

button[aria-pressed='false'] .icon.dark {
    color: var(--accent-overlay);
}

button[aria-pressed='true'] .icon.dark {
    color: var(--accent-text-over);
}

/* Add transitions for a smooth visual effect */
@media (prefers-reduced-motion: no-preference) {
    .icon,
    .icon.light::before {
        transition:
            transform var(--theme-transition),
            color var(--theme-transition);
    }
}

/* Accessibility support for forced-colors mode */
@media (forced-colors: active) {
    .icon.light::before {
        background-color: SelectedItem;
    }
}
